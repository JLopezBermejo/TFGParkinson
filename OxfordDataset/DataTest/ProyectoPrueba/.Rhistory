library(kohonen)
library(dplyr)
library(plot3D)
library(plot3Drgl)
df <- read.csv('D:/Databases/OxfordDataset/DataTest/IrisDataset.csv')
class <- df$Class
df <- select(df,Class)
set.seed(100)
df <- na.omit(df)
Z <- scale(df,center=T,scale=T)
library(kohonen)
library(dplyr)
library(plot3D)
library(plot3Drgl)
df <- read.csv('D:/Databases/OxfordDataset/DataTest/IrisDataset.csv')
class <- df$Class
df <- select(df,-Class)
set.seed(100)
df <- na.omit(df)
Z <- scale(df,center=T,scale=T)
summary(df)
dfScaled <- scale(df,center=T,scale=T)
ejemploSom <- som(dfScaled, grid = somgrid(7,7,"hexagonal"), rlen = 1000)
plot(ejemploSom, shape = "straight")
plot(ejemploSom, type="changes")
degrade.bleu <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight", palette.name = degrade.bleu)
print(length(ejemploSom$unit.classif))
nb <- table(ejemploSom$unit.classif)
print(nb)
degrade.bleu <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight", palette.name = degrade.bleu)
degrade.bleu <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight")
dc <- dist(getCodes(ejemploSom,1))
cah <- hclust(dc,method="ward.D2",members=nb)
print(nb)
print(getCodes(ejemploSom,1)
)
print(length(nb))
print(dist(getCodes(ejemploSom,1)))
cah <- hclust(dc,method="ward.D2",members=nb)
cah <- hclust(dc,method="ward.D2",members=nb+7)
carte <- som(df, grid = somgrid(3,3,"hexagonal"), rlen = 1000)
carte <- som(dfScaled, grid = somgrid(3,3,"hexagonal"), rlen = 1000)
plot(carte, shape = "straight")
plot(carte, type="count", shape = "straight", palette.name = degrade.bleu)
print(length(nb))
nb <- table(carte$unit.classif)
print(nb)
print(length(nb))
dc <- dist(getCodes(carte,1))
cah <- hclust(dc,method="ward.D2",members=nb)
groupes <- cutree(cah, k=4)
plot(carte,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[groupes],
shape = "straight")
add.cluster.boundaries(carte,clustering=groupes)
som_cluster <- cutree(hclust(dist(dfScaled)), k = 4)
plot(ejemploSom, type="mapping", bgcol = som_cluster, main = "Clusters")
add.cluster.boundaries(ejemploSom, som_cluster)
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[som_cluster],
shape = "straight")
add.cluster.boundaries(ejemploSom,clustering=som_cluster)
print(som_cluster)
plot(som_model, type="mapping", bgcol = som_cluster, main = "Clusters")
plot(ejemploSom, type="mapping", bgcol = som_cluster, main = "Clusters")
plot(ejemploSom, type="mapping", bgcol = som_cluster)
plot(som_model, type="mapping")
plot(ejemploSom, type="mapping")
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[som_cluster],
shape = "straight")
som_cluster <- cutree(hclust(dist(getCodes(ejemploSom,1))), k = 4)
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[som_cluster],
shape = "straight")
add.cluster.boundaries(ejemploSom,clustering=som_cluster)
add.cluster.boundaries(ejemploSom,clustering=clusteres)#a単adimos a los clusters bordes
library(kohonen)
library(dplyr)
library(plot3D)
library(plot3Drgl)
df <- read.csv('D:/Databases/OxfordDataset/DataTest/IrisDataset.csv')
class <- df$Class
df <- select(df,-Class)
set.seed(100)
df <- na.omit(df)
dfScaled <- scale(df,center=T,scale=T)
summary(df)
ejemploSom <- som(dfScaled, grid = somgrid(3,3,"hexagonal"), rlen = 1000) # o 7x7
blue.fade <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight", palette.name = blue.fade) #de aqui sale la primera imagen de la representacion
BMUs <- table(ejemploSom$unit.classif)
print(length(BMUs))#comprobamos que no hay vacios IMPORTANTE POR QUE CON VACIOS HAY PROBLEMAS
distancesSOM <- dist(getCodes(ejemploSom,1))
arboldeclusters <- hclust(distancesSOM,method="ward.D2",members=BMUs) #aqui es importante que BMUs y distancesSOM tengan la misma longitud, por eso no tiene que haber vacios
clusteres <- cutree(arboldeclusters, k=4)#cortamos el arbol para que de 4 grupos
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[clusteres], shape = "straight") #pintamos los clusteres con las BMUS de cada uno
add.cluster.boundaries(ejemploSom,clustering=clusteres)#a単adimos a los clusters bordes
df <- read.csv('D:/Databases/OxfordDataset/DataTest/IrisDataset.csv')
class <- df$Class
df <- select(df,-Class)
set.seed(100)
df <- na.omit(df)
dfScaled <- scale(df,center=T,scale=T)
summary(df)
ejemploSom <- som(dfScaled, grid = somgrid(7,7,"hexagonal"), rlen = 1000) # o 7x7
blue.fade <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight", palette.name = blue.fade) #de aqui sale la primera imagen de la representacion
BMUs <- table(ejemploSom$unit.classif)
print(length(BMUs))#comprobamos que no hay vacios IMPORTANTE POR QUE CON VACIOS HAY PROBLEMAS
distancesSOM <- dist(getCodes(ejemploSom,1))
arboldeclusters <- hclust(distancesSOM) #aqui es importante que BMUs y distancesSOM tengan la misma longitud, por eso no tiene que haber vacios
clusteres <- cutree(arboldeclusters, k=4)#cortamos el arbol para que de 4 grupos
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[clusteres], shape = "straight") #pintamos los clusteres con las BMUS de cada uno
add.cluster.boundaries(ejemploSom,clustering=clusteres)#a単adimos a los clusters bordes
df <- read.csv('D:/Databases/OxfordDataset/DataTest/IrisDataset.csv')
class <- df$Class
df <- select(df,-Class)
set.seed(100)
df <- na.omit(df)
dfScaled <- scale(df,center=T,scale=T)
summary(df)
ejemploSom <- som(dfScaled, grid = somgrid(7,7,"hexagonal"), rlen = 1000) # o 7x7
blue.fade <- function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))}
plot(ejemploSom, type="count", shape = "straight", palette.name = blue.fade) #de aqui sale la primera imagen de la representacion
BMUs <- table(ejemploSom$unit.classif)
print(length(BMUs))#comprobamos que no hay vacios IMPORTANTE POR QUE CON VACIOS HAY PROBLEMAS
distancesSOM <- dist(getCodes(ejemploSom,1))
arboldeclusters <- hclust(distancesSOM,method="ward.D2") #aqui es importante que BMUs y distancesSOM tengan la misma longitud, por eso no tiene que haber vacios
clusteres <- cutree(arboldeclusters, k=4)#cortamos el arbol para que de 4 grupos
plot(ejemploSom,type="mapping",bgcol=c("steelblue1","sienna1","yellowgreen","red")[clusteres], shape = "straight") #pintamos los clusteres con las BMUS de cada uno
add.cluster.boundaries(ejemploSom,clustering=clusteres)#a単adimos a los clusters bordes
clean()
rm(list = ls())
sessionInfo()
